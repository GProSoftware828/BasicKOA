'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = reducer;

var _actionTypes = require('./actionTypes');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {};

function reducer() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
  var action = arguments[1];

  switch (action.type) {
    case _actionTypes.INITIALIZE:
      return _extends({}, state, _defineProperty({}, action.form, _extends({}, action.fields.reduce(function (acc, field) {
        return _extends({}, acc, _defineProperty({}, field, {
          value: action.initialValue[field]
        }));
      }, {}), {
        initialized: true
      })));
    case _actionTypes.DESTROY:
      {
        var updateDState = _extends({}, state);
        delete updateDState[action.form];
        return _extends({}, updateDState);
      }
    case _actionTypes.SET_FIELD:
      {
        var field = action.field;
        var value = action.value;
        var form = action.form;

        return _extends({}, state, _defineProperty({}, form, _extends({}, state[form], _defineProperty({}, field, {
          touched: true,
          value: value
        }))));
      }
    case _actionTypes.TOUCH_ALL:
      {
        var _ret = function () {
          var fields = action.fields;
          var form = action.form;

          return {
            v: _extends({}, state, _defineProperty({}, form, _extends({}, state[form], fields.reduce(function (prevField, field) {
              return _extends({}, prevField, _defineProperty({}, field, {
                value: state[form] && state[form][field] ? state[form][field].value : '',
                touched: true
              }));
            }, {}))))
          };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
      }
    default:
      return state;
  }
}